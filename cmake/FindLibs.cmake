## Find Libraries

# Find libcrypto
FIND_PATH(LIBCRYPTO_INCLUDE NAMES openssl/md5.h openssl/sha.h)
FIND_LIBRARY(LIBCRYPTO_LIB  NAMES libcrypto.a libcrypto.so)

IF(LIBCRYPTO_INCLUDE AND LIBCRYPTO_LIB)
    SET(LIBCHAOS_WITH_CRYPTO TRUE)
    SET(CORE_LIBS ${CORE_LIBS} "Crypto")
    SET(LIBCHAOS_CXX_FLAGS "${LIBCHAOS_CXX_FLAGS} -DLIBCHAOS_HAS_CRYPTO")
ELSE()
    MESSAGE(SEND_ERROR "LibChaos requires OpenSSL (libcrypto/libssl)")
ENDIF()

IF(NOT DISABLE_ZPNG)
    # Find zlib and libpng
    FIND_PATH(ZLIB_INCLUDE   NAMES zlib.h)
    FIND_LIBRARY(ZLIB_LIB    NAMES libzlibstatic.a libz.a libz.so)
    FIND_PATH(LIBPNG_INCLUDE NAMES png.h)
    FIND_LIBRARY(LIBPNG_LIB  NAMES libpng.a libpng.so)

    IF(ZLIB_LIB AND ZLIB_INCLUDE AND LIBPNG_LIB AND LIBPNG_INCLUDE)
        SET(LIBCHAOS_WITH_PNG TRUE)
        SET(CORE_LIBS ${CORE_LIBS} "PNG")
        SET(LIBCHAOS_CXX_FLAGS "${LIBCHAOS_CXX_FLAGS} -DLIBCHAOS_HAS_PNG")
    ELSEIF(REQUIRE_ZPNG)
        MESSAGE(SEND_ERROR "PNG support is required (REQUIRE_ZPNG)")
    ENDIF()
ENDIF()

IF(NOT DISABLE_ZJPEG)
    # Find libjpeg
    FIND_PATH(LIBJPEG_INCLUDE NAMES jpeglib.h)
    FIND_LIBRARY(LIBJPEG_LIB  NAMES libjpeg.a libjpeg.so)
    # Apparently libjpeg-turbo is not binary-compatible with libjpeg
    #FIND_LIBRARY(LIBJPEG_LIB  NAMES libturbojpeg.a libjpeg.a libturbojpeg.so libjpeg.so)

    IF(LIBJPEG_LIB AND LIBJPEG_INCLUDE)
        SET(LIBCHAOS_WITH_JPEG TRUE)
        SET(CORE_LIBS ${CORE_LIBS} "JPEG")
        SET(LIBCHAOS_CXX_FLAGS "${LIBCHAOS_CXX_FLAGS} -DLIBCHAOS_HAS_JPEG")
    ELSEIF(REQUIRE_ZJPEG)
        MESSAGE(SEND_ERROR "JPEG support is required (REQUIRE_ZJPEG)")
    ENDIF()
ENDIF()

IF(NOT DISABLE_ZWEBP)
    # Find libwebp
    FIND_PATH(LIBWEBP_INCLUDE NAMES webp/decode.h webp/encode.h)
    FIND_LIBRARY(LIBWEBP_LIB  NAMES libwebp.a libwebp.so)

    IF(LIBWEBP_INCLUDE AND LIBWEBP_LIB)
        SET(LIBCHAOS_WITH_WEBP TRUE)
        SET(CORE_LIBS ${CORE_LIBS} "WebP")
        SET(LIBCHAOS_CXX_FLAGS "${LIBCHAOS_CXX_FLAGS} -DLIBCHAOS_HAS_WEBP")
    ELSEIF(REQUIRE_ZWEBP)
        MESSAGE(SEND_ERROR "WebP support is required (REQUIRE_ZWEBP)")
    ENDIF()
ENDIF()

IF(NOT DISABLE_ZDATABASE)
    # Find sqlite3
    FIND_PATH(LIBSQLITE3_INCLUDE NAMES sqlite3.h)
    FIND_LIBRARY(LIBSQLITE3_LIB  NAMES libsqlite3.a libsqlite3.so)

    IF(LIBSQLITE3_INCLUDE AND LIBSQLITE3_LIB)
        SET(LIBCHAOS_WITH_SQLITE3 TRUE)
        SET(CORE_LIBS ${CORE_LIBS} "SQLite3")
        SET(LIBCHAOS_CXX_FLAGS "${LIBCHAOS_CXX_FLAGS} -DLIBCHAOS_HAS_SQLITE3")
    ELSEIF(REQUIRE_ZDATABASE)
        MESSAGE(SEND_ERROR "SQLite3 support is required (REQUIRE_ZDATABASE)")
    ENDIF()
ENDIF()
